import numpy as np
# Generate schedule numpy array [[weight, length]] randomly. Total number of jobs = n
def generate_data(w_range=10,L_range=10,n=20):
    W=np.random.randint(1,w_range,size=n)
    L=np.random.randint(1,L_range,size=n)
    schedule=np.vstack((W, L)).T
    return schedule

def Greedyratio(S,printing='No'):
    ratio=np.array([S[i,0]/S[i,1] for i in range(len(S))]) # compute ratio W/L
    return transform_array(S,ratio)

def GreedyDiff(S,printing='No'):
    diff=np.array([S[i,0]-S[i,1] for i in range(len(S))]) # compute ratio W/L
    return transform_array(S,diff)
 
def transform_array(S,metric):
    indx = np.arange(0, len(S))
    metric_indx = np.vstack((metric,indx)).T # stack ratio and index
    # sort (asc) based on the diff value
    sorted_arr = metric_indx[np.argsort(metric_indx[:,0])]
    sorted_indx = sorted_arr[:,1] # get indices
    indx = sorted_indx[::-1]  # desc order
    indx = [int(i) for i in indx]
    result = S[indx]
    return result

#Compute Sum of the weighted schedule
def SWS(arr1):
    WSC_resutl = arr1[0,0]*arr1[0,1]
    for i in range(1,len(arr1)):
        WSC_resutl = WSC_resutl  + (arr1[i,0]+arr1[i-1,0])/arr1[i,1]
    return WSC_resutl

array1 = generate_data(20)

print('Original Sum of weigheted schedules ={:0.0f}\nGreedy_Ratio={:0.0f}\nGreedy_difference {:0.0f}'
      .format(SWS(array1),SWS(Greedyratio(array1)),SWS(GreedyDiff(array1))))
