# Generate schedule numpy array [[weight, length]] randomly. Total number of jobs = n
def generate_data(n=20):
    W=np.random.randint(1,20,size=n)
    L=np.random.randint(1,10,size=n)
    schedule=np.vstack((W, L)).T

    return schedule

def Greeduyratio(S,printing='No'):
    ratio=np.array([S[i,0]/S[i,1] for i in range(len(S))]) # compute ratio W/L
    order = np.arange(0, len(S))
    ratio_order = np.vstack((ratio,order)).T
    Greedy_indx = np.array([ratio_order[ratio_order[:,0].argsort(kind='mergesort')][:,1]]) 
    indx = np.ndarray.tolist(Greedy_indx)
    Greedy_ratio_sorted = S[np.argsort(indx)] #asc order
    result = Greedy_ratio_sorted.reshape(S.shape) 
    result = result[::-1] # desc order
    if printing == 'Yes':
        print('original array:\n{}\nGreedy_Ratio_sorted array :\n{}'.format(S.T,result.T))

    return result

def GreeduyDiff(S,printing='No'):
    ratio=np.array([S[i,0]-S[i,1] for i in range(len(S))]) # compute difference W-L
    order = np.arange(0, len(S))
    ratio_order = np.vstack((ratio,order)).T
    Greedy_indx = np.array([ratio_order[ratio_order[:,0].argsort(kind='mergesort')][:,1]])
    indx = np.ndarray.tolist(Greedy_indx)
    Greedy_diff_sorted = S[np.argsort(indx)]
    result = Greedy_diff_sorted.reshape(S.shape)
    result=result[::-1]
    if printing=='Yes':
        print('original array:\n{}\nGreedy_Difference_sorted array :\n{}'.format(S.T,result.T))

    return result
#Compute Sum of the weighted schedule
def Sum_Wieghted_Schedule(arr1):
    WSC_resutl = arr1[0,0]*arr1[0,1]
    for i in range(1,len(arr1)):
        WSC_resutl = WSC_resutl  + (arr1[i,0]+arr1[i-1,0])/arr1[i,1]
    return WSC_resutl


original = generate_data(10)
_GreedyRatiosorted =Greeduyratio(original, 'Yes')
_Greedydifference = GreeduyDiff(original)
print('Original ={}\nGreedy_Ratio={}\nGreedy_difference {}'.format(Sum_Wieghted_Schedule(original),Sum_Wieghted_Schedule(_GreedyRatiosorted),Sum_Wieghted_Schedule(_Greedydifference)))
